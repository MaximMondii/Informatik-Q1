#BlueJ class context
comment0.target=ListGUI
comment1.params=
comment1.target=ListGUI()
comment1.text=\r\n\ Ein\ Konstruktor\ ohne\ Parameter<br>\r\n\ Intern\ wird\ ein\ anderer\ Konstruktor\ aufgerufen,\r\n\ der\ einen\ Parameter\ erwartet.\ Diesem\ wird\ der\r\n\ Parameter\ 0\ uebergeben.\r\n
comment10.params=evt
comment10.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment11.params=e
comment11.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment12.params=evt
comment12.target=void\ bNewList_ActionPerformed(java.awt.event.ActionEvent)
comment12.text=\r\n\ Eine\ neue\ leere\ Liste\ wird\ erzeugt\ und\ ihre\r\n\ Methoden\ werden\ im\ Methodenpanel\ dargestellt.\r\n\ Im\ Knotenpanel\ wird\ der\ Text\ "leere\ Liste"\ angezeigt.\r\n\ Letzteres\ geschieht\ indirekt\ durch\ Aufruf\ der\r\n\ repaint()-Methode\ des\ Knotenpanels.\r\n\ Schliesslich\ werden\ eventuell\ noch\ angezeigte\r\n\ Ergebnisse\ im\ Ergebnispanel\ geloescht.\r\n
comment13.params=evt
comment13.target=void\ bListNull_ActionPerformed(java.awt.event.ActionEvent)
comment13.text=\r\n\ Eine\ existierende\ Liste\ wird\ geloescht.\r\n\ Dazu\ wird\ das\ entsprechnede\ Attribut\ gleich\ null\ gesetzt\r\n\ und\ alle\ Methoden\ in\ der\ Methodenliste\ werden\ geloescht.\r\n\ Im\ Kontenpanel\ werden\ alle\ Knoten\ geloescht.\r\n\ Letzteres\ geschieht\ indirekt\ durch\ Aufruf\ der\r\n\ repaint()-Methode\ des\ Knotenpanels.\r\n\ Schliesslich\ werden\ eventuell\ noch\ angezeigte\r\n\ Ergebnisse\ im\ Ergebnispanel\ geloescht.\r\n
comment14.params=evt
comment14.target=void\ bRefresh_ActionPerformed(java.awt.event.ActionEvent)
comment14.text=\r\n\ Wenn\ die\ Liste\ von\ einem\ externen\ Programm\ veraendert\ wird,\ \r\n\ wird\ sie\ im\ Knotenpanel\ nicht\ automatisch\ neu\ gezeichnet,\ \r\n\ wenn\ die\ Checkbox\ zum\ auto-refresh\ nicht\ markiert\ ist.\r\n\ Mit\ einem\ Klick\ auf\ den\ Button\ refresh\ wird\r\n\ die\ Methode\ repaint\ des\ ganzen\ Fensters\ \r\n\ aufgerufen\ und\ ein\ Neuzeichnen\ auch\ der\ Knoten\r\n\ im\ Knotenpanel\ erzwungen.\r\n
comment15.params=evt
comment15.target=void\ bErgebnisLoeschen_ActionPerformed(java.awt.event.ActionEvent)
comment15.text=\r\n\ Die\ Darstellungen\ des\ Methodenergebnisses\r\n\ im\ Ergebnisfeld\ und\ im\ Objektpanel\ werden\ geloescht.\r\n
comment16.params=evt
comment16.target=void\ chkVisibleObjects_ItemStateChanged(java.awt.event.ItemEvent)
comment16.text=\r\n\ Wenn\ diese\ Checkbox\ markiert\ ist,\ werden\ die\ Inhaltsobjekte\ \r\n\ der\ Knoten\ nicht\ dargestellt.\r\n\ Die\ Entscheidung,\ ob\ die\ Inhalsobjekte\ dargestellt\ oder\ nicht\r\n\ dargestellt\ werden,\ wird\ in\ der\ paintComponent()-Methode\r\n\ des\ Knotenpanels\ (panNodes)\ getroffen.\ Dort\ wird\ der\r\n\ Zusstand\ der\ Checkbox\ abgefragt.\ \r\n\ Mit\ dieser\ Methode\ wird\ lediglich\ das\ Neuzeichnen\ der\r\n\ Knoten\ durch\ Aufruf\ der\ repaint()-Methode\ erzwungen.\r\n
comment17.params=evt
comment17.target=void\ scroller_AdjustmentValueChanged(java.awt.event.AdjustmentEvent)
comment17.text=\r\n\ Wenn\ der\ zugehoerige\ Scroller\ veraendert\ wird,\ \r\n\ wird\ die\ Anzeige\ der\ Liste\ im\ Knotenpanel\ gescrollt\ \r\n\ und\ neu\ dargestellt.\r\n\ Das\ eigentliche\ Scrollen\ und\ die\ Auswahl\ der\ zu\r\n\ zeichnenden\ Knoten\ wird\ in\ der\ paintComponent()-Methode\r\n\ des\ Knotenpanels\ (panNodes)\ vorgenommen.\r\n\ Mit\ dieser\ Methode\ wird\ lediglich\ das\ Neuzeichnen\ der\r\n\ Knoten\ durch\ Aufruf\ der\ repaint()-Methode\ erzwungen.\r\n
comment18.params=evt
comment18.target=void\ spGroesse_StateChanged(javax.swing.event.ChangeEvent)
comment18.text=\r\n\ In\ dem\ zugehoerigen\ Spinner\ wird\ die\ Darstellungsgroesse\ eingestellt.\r\n\ Bei\ jeder\ Aenderung\ am\ Spinner,\ werden\ die\ Inhaltsobjekte\ neu\ dargestellt.\r\n\ Die\ Entscheidung,\ wie\ gross\ die\ Inhalsobjekte\ dargestellt\ werden,\r\n\ wird\ in\ der\ paintComponent()-Methode\ des\ Knotenpanels\ (panNodes)\ getroffen.\ \r\n\ Dort\ wird\ der\ angezeigte\ Inhalt\ des\ Spinner\ abgefragt.\ \r\n\ Mit\ dieser\ Methode\ wird\ lediglich\ das\ Neuzeichnen\ der\r\n\ Knoten\ durch\ Aufruf\ der\ repaint()-Methode\ erzwungen.\r\n
comment19.params=evt
comment19.target=void\ chkAutoRefresh_ItemStateChanged(java.awt.event.ItemEvent)
comment19.text=\r\n\ Wenn\ diese\ Checkbox\ markiert\ wird,\r\n\ wird\ alle\ 100\ ms\ automatisch\ ein\ refresh\ aufgerufen.\r\n\ Dies\ geschieht\ durch\ eine\ Timer-Task,\ welche\ alle\ 100\ ms\r\n\ ein\ Neuzeichnen\ des\ Knotenpanels\ erzwingt.\r\n\ Wenn\ die\ Markierung\ der\ Checkbox\ wieder\ geloescht\ wird,\ \r\n\ wird\ die\ Timer-Task\ beendet.\r\n
comment2.params=nr
comment2.target=ListGUI(int)
comment2.text=\r\n\ Ein\ Konstruktor\ mit\ Parameter<br>\r\n\ Der\ Parameter\ gibt\ an,\ wo\ die\ GUI\ auf\ dem\r\n\ Bildschirm\ erscheinen\ soll.<br>\r\n\ Wenn\ der\ Parameter\ 0\ ist,\ erscheint\ die\ GUI\ in\ der\ Bildschirmmitte.<br>\r\n\ Wenn\ der\ Parameter\ 1\ ist,\ erscheint\ die\ GUI\ oben\ auf\ dem\ Bildschirm.<br>\r\n\ Wenn\ der\ Parameter\ 2\ ist,\ erscheint\ die\ GUI\ unten\ auf\ dem\ Bildschirm.\r\n\ \r\n\ @param\ nr\ die\ Kennzahl\ fuer\ die\ Bildschirmposition\r\n
comment20.params=
comment20.target=java.lang.String[]\ gibListKlassen()
comment20.text=\r\n\ Die\ Methode\ gibt\ die\ Namen\ aller\ Klassen,\ die\ von\ List\ erben\r\n\ und\ sich\ im\ Projektordner\ befinden\ als\ Stringarray\ zurueck.\r\n\ \r\n\ @return\ ein\ Stringarray\ von\ Klassennamen\r\n
comment21.params=ausdruck
comment21.target=void\ interpretiere(java.lang.String)
comment21.text=\r\n\ In\ dieser\ Methode\ wird\ der\ als\ Parameter\ uebergebene\ String\r\n\ interpretiert.\ Es\ handelt\ sich\ um\ einen\ Stringdarstellung\r\n\ der\ im\ Methodenpanel\ angelickten\ Methode.\ Per\ Reflection\r\n\ wird\ die\ entsprechende\ Methode\ ausgefuehrt.\ Die\ Parameter\r\n\ der\ Methode\ werden\ aus\ den\ beiden\ Textfeldern\ bestimmt.\r\n\r\n\ @param\ ausdruck\ ein\ Methoden-String\r\n
comment22.params=gui
comment22.target=void\ guiAnmelden(ListGUI)
comment22.text=\r\n\ Mit\ dieser\ Methode\ kann\ eine\ andere\ Instanz\ der\r\n\ Klasse\ ListGUI\ angemeldet\ werden.<br>\r\n\ Damit\ ist\ es\ moeglich,\ zwei\ Listen\ zu\ verwalten\r\n\ und\ mithilfe\ der\ Methode\ concat\ zu\ verknuepfen.\r\n\ \r\n\ @param\ gui\ die\ andere\ GUI\r\n
comment23.params=list
comment23.target=void\ listAnmelden(List)
comment23.text=\r\n\ Mit\ dieser\ Methode\ kann\ eine\ extern\ erzeugte\r\n\ Liste\ angemeldet\ werden.<br>\r\n\ Die\ Liste\ wird\ in\ dem\ Attribut\ myList\ gespeichert.<br>\r\n\ Die\ Methoden\ der\ Implementation\ werden\ eingelesen\ und\ \r\n\ im\ Methodenpanel\ dargestellt.\r\n\ \r\n\ @param\ list\ die\ Liste,\ die\ angemeldet\ werden\ soll.\r\n
comment24.params=thisClass
comment24.target=boolean\ erbtVonList(java.lang.Class)
comment25.params=thisClass
comment25.target=java.util.ArrayList\ getMethods(java.lang.Class)
comment26.params=
comment26.target=void\ refresh()
comment26.text=\r\n\ Das\ ganze\ GUI-Fenster\ wird\ neu\ gezeichnet.<br>\r\n\ Damit\ wird\ auch\ die\ Darstellung\ im\ Knotenpanel\ erneuert.\r\n
comment27.params=
comment27.target=List\ gibMyList()
comment27.text=\r\n\ Die\ einfach\ verkettete\ Liste\ dieser\ GUI\ wird\ zurueck\ gegeben.\r\n\ \r\n\ @return\ die\ Liste\r\n
comment28.params=args
comment28.target=void\ main(java.lang.String[])
comment28.text=\r\n\ Die\ main-Methode\ ruft\ den\ parameterlosen\ Konstruktor\r\n\ der\ Klasse\ ListGUI\ auf.\ Das\ Fenster\ erscheint\ in\ der\r\n\ Mitte\ des\ Bildschirms.\r\n
comment3.params=evt
comment3.target=void\ itemStateChanged(java.awt.event.ItemEvent)
comment4.params=evt
comment4.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment5.params=evt
comment5.target=void\ stateChanged(javax.swing.event.ChangeEvent)
comment6.params=evt
comment6.target=void\ adjustmentValueChanged(java.awt.event.AdjustmentEvent)
comment7.params=evt
comment7.target=void\ itemStateChanged(java.awt.event.ItemEvent)
comment8.params=evt
comment8.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment9.params=evt
comment9.target=void\ actionPerformed(java.awt.event.ActionEvent)
numComments=29
